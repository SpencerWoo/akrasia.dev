{"version":3,"file":"component---src-pages-results-index-js-5a27ce0a5e639767094f.js","mappings":"qNAkBA,MAuFaA,EAAO,IAAM,gBAAC,IAAG,CAACC,MAAM,YAErC,UAzFqBC,IAEnB,MAAM,YAACC,EAAW,KAAEC,GAAQF,EAC5BG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAEZ,MAAMG,EAAWH,EAAKI,OAAOC,MACvBC,EAAYN,EAAKO,QAAQF,MAY/B,OACE,gBAAC,IAAM,CAACG,UAAU,WAEdL,EAASM,KAAKC,GACZ,2BAASC,IAAKD,EAAKE,IAChBF,EAAKG,YAAYhB,MAClB,gBAAC,EAAAiB,EAAW,CACVC,OAAOC,EAAAA,EAAAA,GAASN,EAAKG,YAAYI,aACjCC,IAAI,KAEN,gBAAC,EAAAJ,EAAW,CACVC,OAAOC,EAAAA,EAAAA,GAASN,EAAKG,YAAYM,gBACjCD,IAAI,QAORZ,EAAUG,KAAKC,GACf,2BACE,4BACGA,EAAKU,OAAOC,aAKd,C","sources":["webpack://my-first-gatsby-site/./src/pages/results/index.js"],"sourcesContent":["import * as React from 'react'\nimport { graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\n// const fmtTrialResults(trial, dataNodes, mdxNodes) {\n\n// }\n\n// function testF(trial){\n//   const dataResults = dataNodes.filter(node => node.relativeDirectory.includes(trial))\n//   const analysisImage = mdxNodes.filter(node => node.frontmatter.analysis_image.relativeDirectory.includes(trial))\n//   const multiImage = mdxNodes.filter(node => node.frontmatter.multi_image.relativeDirectory.includes(trial))\n\n//   f = ''\n// }\n\nconst ResultsPage = (props) => {\n  // console.log(data, children)\n  const {pageContext, data} = props\n  console.log(pageContext)\n  console.log(data)\n\n  const mdxNodes = data.allMdx.nodes;\n  const dataNodes = data.allFile.nodes;\n\n  const trialFolders = ['trial-one', 'trial-two', 'trial-three']\n\n  const results = [];\n  // trialFolders.map(trial => testF(trial, dataNodes, mdxNodes));\n  // const dataResults = dataNodes.filter(node => node.relativeDirectory.includes('trial-one'))\n  // const analysisImage = mdxNodes.filter(node => node.frontmatter.analysis_image.relativeDirectory.includes('trial-one'))\n  // const multiImage = mdxNodes.filter(node => node.frontmatter.multi_image.relativeDirectory.includes('trial-one'))\n\n  // const t1Nodes = \n\n  return (\n    <Layout pageTitle=\"Results\">\n      {\n        mdxNodes.map((node) => (\n          <article key={node.id}> \n            {node.frontmatter.title} \n            <GatsbyImage\n              image={getImage(node.frontmatter.multi_image)}\n              alt=\"\"\n            />\n            <GatsbyImage\n              image={getImage(node.frontmatter.analysis_image)}\n              alt=\"\"\n            />\n          </article>\n        ))\n      }\n\n        {\n          dataNodes.map((node) => (\n          <pre>\n            <code>\n              {node.fields.contents}\n            </code>\n          </pre>\n        ))\n      }\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx (sort: {frontmatter : {date: ASC}}\n            filter: {internal: {contentFilePath: {regex: \"/(results/)/\"}}}) {\n      nodes {\n        frontmatter {\n          date(formatString: \"MMMM D, YYYY\")\n          title\n          multi_image {\n            childImageSharp {\n              gatsbyImageData\n            }\n            relativeDirectory\n          }\n          analysis_image {\n            childImageSharp {\n              gatsbyImageData\n            }\n            relativeDirectory\n          }\n        }\n        id\n      }\n    }\n    allFile(filter: {relativePath: {regex: \"/(results)/\"}, extension: {eq: \"\"}}) {\n      nodes {\n        name\n        extension\n        fields {\n          contents\n        }\n        relativeDirectory\n      }\n    }\n  }\n`\n\nexport const Head = () => <Seo title=\"Results\" />\n\nexport default ResultsPage"],"names":["Head","title","props","pageContext","data","console","log","mdxNodes","allMdx","nodes","dataNodes","allFile","pageTitle","map","node","key","id","frontmatter","G","image","getImage","multi_image","alt","analysis_image","fields","contents"],"sourceRoot":""}