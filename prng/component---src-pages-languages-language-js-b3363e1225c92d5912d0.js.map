{"version":3,"file":"component---src-pages-languages-language-js-b3363e1225c92d5912d0.js","mappings":"yJAmBA,IAhBY,IAAgB,IAAf,MAAEA,GAAO,EACpB,MAAMC,GAAOC,EAAAA,EAAAA,IAAe,cAU5B,OACE,6BAAQF,EAAM,MAAIC,EAAKE,KAAKC,aAAaJ,MAAc,C,qHCT3D,MAwEaK,EAAO,QAAC,KAAEJ,GAAM,SAAK,gBAAC,IAAG,CAACD,MAAOM,UAAY,EAE1D,UA1EuBC,IAErB,MAAM,YAACC,EAAW,KAAEP,GAAQM,EACtBD,EAAWE,EAAkB,KAEnC,IAAIF,EACF,OAGF,MAAMG,EAAQR,EAAKS,QAAQD,MAErBE,EAAaF,EAAMG,QAAOC,GAAQA,EAAKC,OAASR,IAAU,GAE1DS,EAAaN,EAAMG,QAAOC,GAA2B,QAAnBA,EAAKG,YACvCC,EAAcR,EAAMG,QAAOC,GAA2B,KAAnBA,EAAKG,WAAuC,QAAnBH,EAAKG,YAEjEE,EAASH,EAAWI,KAAIN,IAAQO,EAAAA,EAAAA,GAASP,EAAKQ,mBAKpD,OACE,gBAAC,IAAM,CAACC,UAAWhB,GAEhBY,EAAOC,KAAII,GACV,gBAAC,EAAAC,EAAW,CACVD,MAAOA,EACPE,IAAI,OAGR,2BAEA,2BACE,4BACGR,EAAYE,KAAIN,GACfA,EAAKa,OAAOC,aAKlB,2BAEA,2BACE,4BAEGhB,EAAWe,OAAOC,WAIvB,2BACO,C","sources":["webpack://my-first-gatsby-site/./src/components/seo.js","webpack://my-first-gatsby-site/./src/pages/languages/language.js"],"sourcesContent":["import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>{title} | {data.site.siteMetadata.title}</title>\n  )\n}\n\nexport default Seo","import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\nconst LanguagesPost = (props) => {\n  // console.log(props)\n  const {pageContext, data} = props\n  const language = pageContext['name']\n\n  if(!language){\n    return\n  }\n\n  const nodes = data.allFile.nodes;\n  \n  const sourceNode = nodes.filter(node => node.name === language)[0] // required\n\n  const imageNodes = nodes.filter(node => node.extension === 'png')\n  const resultNodes = nodes.filter(node => node.extension === '' || node.extension === 'txt')\n\n  const images = imageNodes.map(node => getImage(node.childImageSharp))\n\n  // TODO: Split into trials for display\n\n  // node.fields.contents.replaceAll(/\\s/g, \"\\n\")\n  return (\n    <Layout pageTitle={language}>\n\n      {images.map(image => \n        <GatsbyImage\n          image={image}\n          alt=\"\"\n        />\n      )}\n      <hr></hr>\n      \n      <pre>\n        <code>\n          {resultNodes.map(node => \n            node.fields.contents\n          )}\n        </code>\n      </pre>\n\n      <hr></hr>\n\n      <pre>\n        <code>\n          \n          {sourceNode.fields.contents}\n        </code>\n      </pre>\n        \n      <hr></hr>      \n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($regLang: String){\n    allFile(filter: {relativePath: {regex: $regLang}}) {\n      nodes {\n        name\n        relativePath\n        extension\n        fields {\n          contents\n        }\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n    }\n  }\n`\n\nexport const Head = ({ data }) => <Seo title={language} />\n\nexport default LanguagesPost\n"],"names":["title","data","useStaticQuery","site","siteMetadata","Head","language","props","pageContext","nodes","allFile","sourceNode","filter","node","name","imageNodes","extension","resultNodes","images","map","getImage","childImageSharp","pageTitle","image","G","alt","fields","contents"],"sourceRoot":""}