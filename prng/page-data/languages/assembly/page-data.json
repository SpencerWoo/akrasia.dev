{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/assembly/","result":{"data":{"allFile":{"nodes":[{"name":"assembly","relativePath":"languages/assembly/assembly.asm","extension":"asm","fields":{"contents":".section __TEXT,__text\n.globl _start\n\n_start:\n    movl $0, %eax          # Set up counter\n    movl $0x64, %ebx          # Set up loop count\n    movl $0xA, %ecx          # Set up max value\n    leaq numbers(%rip), %rdi     # Set up array address using RIP-relative addressing\n    \ninit:\n    movl $0, %edx          # Generate a random number between 0 and X-1\n    movl $0x7fffffff, %eax\n    xor %rdx, %rdx\n    div %ecx\n    inc %edx\n    \n    movl %edx, (%rdi,%rax,4)     # Store the number in the array\n    \n    inc %eax                # Increment the counter\n    cmp %ebx, %eax          # Compare the counter to the loop count\n    jne init                # Loop until counter == loop count\n    \n    movq $1, %rax           # Open a file for writing\n    leaq filename(%rip), %rdi\n    movq $0x0202, %rsi\n    movq $0x1a4, %rdx\n    syscall\n    \n    movq %rax, %rdi         # Write the output to the file\n    leaq numbers(%rip), %rsi\n    movq $4*0x64, %rdx\n    movq $0x0201, %rax\n    syscall\n    \n    movq $0, %rdi           # Exit\n    movq $0x2000001, %rax\n    syscall\n    \n.section __DATA,__data\nnumbers:\n    .space 0x64*4\n    \n.section __DATA,__const\nfilename:\n    .asciz \"assembly_X_N\""},"childImageSharp":null}]}},"pageContext":{"name":"assembly","regLang":"/(languages/assembly)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}