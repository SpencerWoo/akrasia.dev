{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/rust/","result":{"data":{"allFile":{"nodes":[{"name":"rust","relativePath":"languages/rust/rust.rs","extension":"rs","fields":{"contents":"use std::fs::{create_dir_all, File};\nuse std::io::Write;\nuse std::collections::HashMap;\nuse rand::{thread_rng, Rng};\n\n// Set the number of random numbers to generate and the upper bound for the numbers\nconst N: usize = 10;\nconst X: usize = 100;\n\nfn main() {\n    // Generate N random numbers between 1 and X\n    let numbers: Vec<usize> = (0..N).map(|_| thread_rng().gen_range(1, X + 1)).collect();\n\n    // Calculate the probability of each number\n    let mut counts = HashMap::new();\n    for number in &numbers {\n        *counts.entry(number).or_insert(0) += 1;\n    }\n    let total = numbers.len();\n    let probabilities = numbers\n        .iter()\n        .map(|number| (number, *counts.get(number).unwrap() as f64 / total as f64))\n        .collect::<Vec<_>>();\n\n    // Generate a file name based\n"},"childImageSharp":null}]}},"pageContext":{"name":"rust","regLang":"/(languages/rust)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}