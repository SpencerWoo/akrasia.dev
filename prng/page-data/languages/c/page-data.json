{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/c/","result":{"data":{"allFile":{"nodes":[{"name":"cplus","relativePath":"languages/cplus/cplus.cc","extension":"cc","fields":{"contents":"#include <algorithm>\n#include <fstream>\n#include <iostream>\n#include <map>\n#include <random>\n#include <string>\n#include <vector>\n\nconst int N = 10;\nconst int X = 100;\n\n// Generate N random numbers between 1 and X\nstd::vector<int> generate_random_numbers()\n{\n    std::random_device rd;\n    std::mt19937 mt(rd());\n    std::uniform_int_distribution<int> dist(1, X);\n\n    std::vector<int> numbers;\n    for (int i = 0; i < N; i++)\n    {\n        numbers.push_back(dist(mt));\n    }\n\n    return numbers;\n}\n\n// Calculate the probability of each number\nstd::map<int, double> calculate_probabilities(const std::vector<int> &numbers)\n{\n    std::map<int, int> counts;\n    for (auto number : numbers)\n    {\n        counts[number]++;\n    }\n\n    std::map<int, double> probabilities;\n    for (const auto &kvp : counts)\n    {\n        probabilities[kvp.first] = (double)kvp.second / N;\n    }\n\n    return probabilities;\n}\n\n// Generate a file name based on the values of N and X\nstd::string generate_file_name()\n{\n    return \"cplus_\" + std::to_string(N) + \"_\" + std::to_string(X) + \".csv\";\n}\n\nint main()\n{\n    // Generate the random numbers and calculate their probabilities\n    auto numbers = generate_random_numbers();\n    auto probabilities = calculate_probabilities(numbers);\n\n    // Generate a file name and create the \"outputs\" directory if it does not exist\n    auto file_name = generate_file_name();\n    std::filesystem::create_directories(\"outputs\");\n\n    // Write the probabilities to a file in the \"outputs\" directory\n    std::ofstream file(\"outputs/\" + file_name);\n    for (const auto &kvp : probabilities)\n    {\n        file << kvp.first << \",\" << kvp.second << \"\\n\";\n    }\n\n    return 0;\n}\n"},"childImageSharp":null},{"name":"clojure","relativePath":"languages/clojure/clojure.clj","extension":"clj","fields":{"contents":";; Set the number of random numbers to generate and the upper bound for the numbers\n(def N 10)\n(def X 100)\n\n;; Generate N random numbers between 1 and X\n(defn generate-numbers []\n    (let [random (rand-int X)]\n        (repeatedly N #(+ random 1))))\n\n;; Calculate the probability of each number\n(defn calculate-probabilities [numbers]\n    (map #(/ (count (filter #{X} numbers)) N) (range 1 (inc X))))\n\n;; Generate a file name based on the values of N and X\n(defn generate-file-name []\n    (str \"clojure\" N X \".csv\"))\n\n;; Create the \"outputs\" directory if it does not exist\n(defn create-output-directory []\n    (if-not (clojure.java.io/file \"outputs\")\n        (clojure.java.io/file \"outputs\")))\n\n;; Write the probabilities to a file in the \"outputs\" directory\n(defn write-probabilities [probabilities]\n    (with-open [writer (clojure.java.io/writer (str \"outputs/\" (generate-file-name)))]\n        (doseq [[probability i] (map-indexed vector probabilities)]\n            (write-line writer (str i \",\" probability)))))\n\n;; Generate the numbers and calculate the probabilities\n(let [numbers (generate-numbers)]\n    (def probabilities (calculate-probabilities numbers))\n\n;; Create the output directory and write the probabilities to a file\n    (create-output-directory)\n    (write-probabilities probabilities))\n"},"childImageSharp":null},{"name":"c","relativePath":"languages/c/c.c","extension":"c","fields":{"contents":"#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n\n#define N 10\n#define X 100\n\n// Create the \"outputs\" directory if it does not exist\nvoid create_outputs_directory()\n{\n    struct stat st = {0};\n    if (stat(\"outputs\", &st) == -1)\n    {\n        mkdir(\"outputs\", 0755);\n    }\n}\n\nint main()\n{\n    // Generate N random numbers between 1 and X\n    srand(time(NULL));\n    int numbers[N];\n    for (int i = 0; i < N; i++)\n    {\n        numbers[i] = rand() % X + 1;\n    }\n\n    // Calculate the probability of each number\n    int counts[X] = {0};\n    for (int i = 0; i < N; i++)\n    {\n        counts[numbers[i] - 1]++;\n    }\n    double probabilities[X];\n    for (int i = 0; i < X; i++)\n    {\n        probabilities[i] = (double)counts[i] / N;\n    }\n\n    // Generate a file name based on the values of N and X\n    char file_name[100];\n    sprintf(file_name, \"c_%d_%d.csv\", N, X);\n\n    // Create the \"outputs\" directory if it does not exist\n    create_outputs_directory();\n\n    // Write the probabilities to a file in the \"outputs\" directory\n    FILE *fp = fopen(\"outputs/file_name\", \"w\");\n    for (int i = 0; i < X; i++)\n    {\n        fprintf(fp, \"%d,%f\\n\", i + 1, probabilities[\n"},"childImageSharp":null},{"name":"csharp","relativePath":"languages/csharp/csharp.cs","extension":"cs","fields":{"contents":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace RandomNumbers\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Set the number of random numbers to generate and the upper bound for the numbers\n            var n = 10;\n            var x = 100;\n\n            // Generate N random numbers between 1 and X\n            var random = new Random();\n            var numbers = Enumerable.Range(0, n).Select(_ => random.Next(1, x + 1)).ToList();\n\n            // Calculate the probability of each number\n            var counts = numbers.GroupBy(number => number).ToDictionary(group => group.Key, group => group.Count());\n            var total = numbers.Count;\n            var probabilities = counts.ToDictionary(kvp => kvp.Key, kvp => kvp.Value / (double)total);\n\n            // Generate a file name based on the values of N and X\n            var fileName = $\"csharp_{n}_{x}.csv\";\n\n            // Create the \"outputs\" directory if it does not exist\n            Directory.CreateDirectory(\"outputs\");\n\n            // Write the probabilities to a file in the \"outputs\" directory\n            using (var writer = new StreamWriter($\"outputs/{fileName}\"))\n            {\n                foreach (var (number, probability) in numbers.Zip(probabilities.Values, (number, probability) => (number, probability)))\n                {\n                    writer.WriteLine($\"{number},{probability}\");\n                }\n            }\n        }\n    }\n}\n"},"childImageSharp":null}]}},"pageContext":{"name":"c","regLang":"/(languages/c)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}