{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/lisp/","result":{"data":{"allFile":{"nodes":[{"name":"lisp","relativePath":"languages/lisp/lisp.lisp","extension":"lisp","fields":{"contents":";; Set the number of random numbers to generate and the upper bound for the numbers\n(defparameter *n* 10)\n(defparameter *x* 100)\n\n;; Generate N random numbers between 1 and X\n(defun generate-random-numbers ()\n  (loop repeat *n*\n        collect (random *x*)))\n\n;; Calculate the probability of each number\n(defun calculate-probabilities (numbers)\n  (let* ((counts (make-array *x* :initial-element 0))\n         (total *n*))\n    (dolist (number numbers)\n      (incf (aref counts (1- number))))\n    (loop for i from 1 to *x*\n          collect (/ (aref counts i) total))))\n\n;; Generate a file name based on the values of N and X\n(defun file-name ()\n  (format nil \"lisp~d~d.csv\" *n* *x*))\n\n;; Create the \"outputs\" directory if it does not exist\n(defun create-output-directory ()\n  (unless (probe-file \"outputs\")\n    (make-directory \"outputs\")))\n\n;; Write the probabilities to a file in the \"outputs\" directory\n(defun write-probabilities (probabilities)\n  (with-open-file (stream (format nil \"outputs/~A\" (file-name)))\n    (loop for i from 1 to *x*\n          do\n"},"childImageSharp":null}]}},"pageContext":{"name":"lisp","regLang":"/(languages/lisp)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}