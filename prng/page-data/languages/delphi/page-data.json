{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/delphi/","result":{"data":{"allFile":{"nodes":[{"name":"delphi","relativePath":"languages/delphi/delphi.dpr","extension":"dpr","fields":{"contents":"program GenerateRandomNumbers;\n\n{$APPTYPE CONSOLE}\n\nuses\n  SysUtils, Classes;\n\n// Set the number of random numbers to generate and the upper bound for the numbers\nconst\n  N = 10;\n  X = 100;\n\n// Generate N random numbers between 1 and X\nfunction GenerateNumbers: TArray<Integer>;\nvar\n  i: Integer;\nbegin\n  // Initialize the random number generator with a seed based on the current time\n  Randomize;\n\n  // Generate the random numbers and store them in the array\n  SetLength(Result, N);\n  for i := 0 to N - 1 do\n    Result[i] := Random(X) + 1;\nend;\n\n// Calculate the probability of each number\nfunction CalculateProbabilities(const numbers: TArray<Integer>): TArray<Double>;\nvar\n  counts: TArray<Integer>;\n  i: Integer;\n  total: Integer;\nbegin\n  // Initialize the array of counts\n  SetLength(counts, X);\n  for i := 0 to X - 1 do\n    counts[i] := 0;\n\n  // Calculate the number of occurrences of each number\n  total := N;\n  for i := 0 to N - 1 do\n    Inc(counts[numbers[i] - 1]);\n\n  // Calculate the probability of each number\n  SetLength(Result, X);\n  for i := 0 to X - 1 do\n    Result[i] := counts[i] / total;\nend;\n\n// Generate a file name based on the values of N and X\nfunction GenerateFileName: string;\nbegin\n  Result := Format('delphi%d%d.csv', [N, X]);\nend;\n\n// Create the \"outputs\" directory if it does not exist\nprocedure CreateOutputDirectory;\nbegin\n  if not DirectoryExists('outputs') then\n    CreateDir('outputs');\nend;\n\n// Write the probabilities to a file in the \"outputs\" directory\nprocedure WriteProbabilities(const probabilities: TArray<Double>);\nvar\n  fileName: string;\n  file: TextFile;\n  i: Integer;\nbegin\n  fileName := GenerateFileName;\n  AssignFile(file, 'outputs\\' + fileName);\n  try\n    Rewrite(file);\n    for i := 0 to X - 1 do\n      WriteLn(file, i + 1, ',', probabilities[i]);\n  finally\n"},"childImageSharp":null}]}},"pageContext":{"name":"delphi","regLang":"/(languages/delphi)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}