{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/clojure/","result":{"data":{"allFile":{"nodes":[{"name":"clojure","relativePath":"languages/clojure/clojure.clj","extension":"clj","fields":{"contents":";; Set the number of random numbers to generate and the upper bound for the numbers\n(def N 10)\n(def X 100)\n\n;; Generate N random numbers between 1 and X\n(defn generate-numbers []\n    (let [random (rand-int X)]\n        (repeatedly N #(+ random 1))))\n\n;; Calculate the probability of each number\n(defn calculate-probabilities [numbers]\n    (map #(/ (count (filter #{X} numbers)) N) (range 1 (inc X))))\n\n;; Generate a file name based on the values of N and X\n(defn generate-file-name []\n    (str \"clojure\" N X \".csv\"))\n\n;; Create the \"outputs\" directory if it does not exist\n(defn create-output-directory []\n    (if-not (clojure.java.io/file \"outputs\")\n        (clojure.java.io/file \"outputs\")))\n\n;; Write the probabilities to a file in the \"outputs\" directory\n(defn write-probabilities [probabilities]\n    (with-open [writer (clojure.java.io/writer (str \"outputs/\" (generate-file-name)))]\n        (doseq [[probability i] (map-indexed vector probabilities)]\n            (write-line writer (str i \",\" probability)))))\n\n;; Generate the numbers and calculate the probabilities\n(let [numbers (generate-numbers)]\n    (def probabilities (calculate-probabilities numbers))\n\n;; Create the output directory and write the probabilities to a file\n    (create-output-directory)\n    (write-probabilities probabilities))\n"},"childImageSharp":null}]}},"pageContext":{"name":"clojure","regLang":"/(languages/clojure)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}