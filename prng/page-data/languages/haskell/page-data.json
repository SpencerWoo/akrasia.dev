{"componentChunkName":"component---src-pages-languages-language-js","path":"/languages/haskell/","result":{"data":{"allFile":{"nodes":[{"name":"haskell","relativePath":"languages/haskell/haskell.hs","extension":"hs","fields":{"contents":"import System.Random (randomRIO)\nimport qualified Data.Map.Strict as Map\nimport Data.List (foldl')\nimport Control.Monad (replicateM)\nimport System.Directory (createDirectoryIfMissing)\n\n-- Set the number of random numbers to generate and the upper bound for the numbers\nn = 10\nx = 100\n\n-- Generate N random numbers between 1 and X\nnumbers :: IO [Int]\nnumbers = replicateM n $ randomRIO (1, x)\n\n-- Calculate the probability of each number\nprobabilities :: [Int] -> [Double]\nprobabilities nums =\n  let\n    total = length nums\n    counts = foldl' (\\m n -> Map.insertWith (+) n 1 m) Map.empty nums\n  in\n    map (\\n -> fromIntegral (counts Map.! n) / fromIntegral total) nums\n\n-- Generate a file name based on the values of N and X\nfileName = \"haskell_\" ++ show n ++ \"_\" ++ show x ++ \".csv\"\n\n-- Create the \"outputs\" directory if it does not exist\ncreateDirectoryIfMissing True \"outputs\"\n\n-- Write the probabilities to a file in the \"outputs\" directory\nmain :: IO ()\nmain = do\n  ns <- numbers\n  let ps = probabilities ns\n  writeFile (\"outputs/\" ++ fileName) $ unlines $ map (\\(n, p) -> show n ++ \",\" ++ show p) $ zip ns ps\n"},"childImageSharp":null}]}},"pageContext":{"name":"haskell","regLang":"/(languages/haskell)/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}